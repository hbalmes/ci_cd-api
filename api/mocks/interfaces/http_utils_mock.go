// Code generated by MockGen. DO NOT EDIT.
// Source: utils/http_utils.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHTTPContext is a mock of HTTPContext interface
type MockHTTPContext struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPContextMockRecorder
}

// MockHTTPContextMockRecorder is the mock recorder for MockHTTPContext
type MockHTTPContextMockRecorder struct {
	mock *MockHTTPContext
}

// NewMockHTTPContext creates a new mock instance
func NewMockHTTPContext(ctrl *gomock.Controller) *MockHTTPContext {
	mock := &MockHTTPContext{ctrl: ctrl}
	mock.recorder = &MockHTTPContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPContext) EXPECT() *MockHTTPContextMockRecorder {
	return m.recorder
}

// GetRawData mocks base method
func (m *MockHTTPContext) GetRawData() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawData indicates an expected call of GetRawData
func (mr *MockHTTPContextMockRecorder) GetRawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawData", reflect.TypeOf((*MockHTTPContext)(nil).GetRawData))
}

// BindJSON mocks base method
func (m *MockHTTPContext) BindJSON(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindJSON indicates an expected call of BindJSON
func (mr *MockHTTPContextMockRecorder) BindJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockHTTPContext)(nil).BindJSON), arg0)
}

// GetHeader mocks base method
func (m *MockHTTPContext) GetHeader(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockHTTPContextMockRecorder) GetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockHTTPContext)(nil).GetHeader), arg0)
}

// JSON mocks base method
func (m *MockHTTPContext) JSON(arg0 int, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", arg0, arg1)
}

// JSON indicates an expected call of JSON
func (mr *MockHTTPContextMockRecorder) JSON(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockHTTPContext)(nil).JSON), arg0, arg1)
}

// Param mocks base method
func (m *MockHTTPContext) Param(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param
func (mr *MockHTTPContextMockRecorder) Param(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockHTTPContext)(nil).Param), key)
}

// ShouldBindJSON mocks base method
func (m *MockHTTPContext) ShouldBindJSON(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBindJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShouldBindJSON indicates an expected call of ShouldBindJSON
func (mr *MockHTTPContextMockRecorder) ShouldBindJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBindJSON", reflect.TypeOf((*MockHTTPContext)(nil).ShouldBindJSON), arg0)
}
