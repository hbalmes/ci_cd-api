// Code generated by MockGen. DO NOT EDIT.
// Source: services/storage/sql.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockSQLStorage is a mock of SQLStorage interface
type MockSQLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSQLStorageMockRecorder
}

// MockSQLStorageMockRecorder is the mock recorder for MockSQLStorage
type MockSQLStorageMockRecorder struct {
	mock *MockSQLStorage
}

// NewMockSQLStorage creates a new mock instance
func NewMockSQLStorage(ctrl *gomock.Controller) *MockSQLStorage {
	mock := &MockSQLStorage{ctrl: ctrl}
	mock.recorder = &MockSQLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLStorage) EXPECT() *MockSQLStorageMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockSQLStorage) Insert(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockSQLStorageMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSQLStorage)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockSQLStorage) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSQLStorageMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSQLStorage)(nil).Update), arg0)
}

// Get mocks base method
func (m *MockSQLStorage) Get(arg0, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockSQLStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSQLStorage)(nil).Get), arg0, arg1)
}

// GetBy mocks base method
func (m *MockSQLStorage) GetBy(arg0 interface{}, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBy indicates an expected call of GetBy
func (mr *MockSQLStorageMockRecorder) GetBy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBy", reflect.TypeOf((*MockSQLStorage)(nil).GetBy), varargs...)
}

// Delete mocks base method
func (m *MockSQLStorage) Delete(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSQLStorageMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSQLStorage)(nil).Delete), arg0)
}

// DeleteFromRequireStatusChecksByConfigurationID mocks base method
func (m *MockSQLStorage) DeleteFromRequireStatusChecksByConfigurationID(arg0 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromRequireStatusChecksByConfigurationID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromRequireStatusChecksByConfigurationID indicates an expected call of DeleteFromRequireStatusChecksByConfigurationID
func (mr *MockSQLStorageMockRecorder) DeleteFromRequireStatusChecksByConfigurationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromRequireStatusChecksByConfigurationID", reflect.TypeOf((*MockSQLStorage)(nil).DeleteFromRequireStatusChecksByConfigurationID), arg0)
}

// MockSQLClient is a mock of SQLClient interface
type MockSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLClientMockRecorder
}

// MockSQLClientMockRecorder is the mock recorder for MockSQLClient
type MockSQLClientMockRecorder struct {
	mock *MockSQLClient
}

// NewMockSQLClient creates a new mock instance
func NewMockSQLClient(ctrl *gomock.Controller) *MockSQLClient {
	mock := &MockSQLClient{ctrl: ctrl}
	mock.recorder = &MockSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLClient) EXPECT() *MockSQLClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSQLClient) Create(value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSQLClientMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSQLClient)(nil).Create), value)
}

// Find mocks base method
func (m *MockSQLClient) Find(out interface{}, where ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{out}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockSQLClientMockRecorder) Find(out interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{out}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSQLClient)(nil).Find), varargs...)
}

// Save mocks base method
func (m *MockSQLClient) Save(value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSQLClientMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSQLClient)(nil).Save), value)
}

// Delete mocks base method
func (m *MockSQLClient) Delete(value interface{}, where ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range where {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSQLClientMockRecorder) Delete(value interface{}, where ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, where...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSQLClient)(nil).Delete), varargs...)
}

// Set mocks base method
func (m *MockSQLClient) Set(name string, value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", name, value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockSQLClientMockRecorder) Set(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSQLClient)(nil).Set), name, value)
}

// Close mocks base method
func (m *MockSQLClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSQLClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSQLClient)(nil).Close))
}

// AutoMigrate mocks base method
func (m *MockSQLClient) AutoMigrate(values ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate
func (mr *MockSQLClientMockRecorder) AutoMigrate(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockSQLClient)(nil).AutoMigrate), values...)
}
