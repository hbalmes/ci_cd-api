// Code generated by MockGen. DO NOT EDIT.
// Source: clients/github.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/hbalmes/ci_cd-api/api/models"
	webhook "github.com/hbalmes/ci_cd-api/api/models/webhook"
	apierrors "github.com/hbalmes/ci_cd-api/api/utils/apierrors"
	reflect "reflect"
)

// MockGithubClient is a mock of GithubClient interface
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// GetBranchInformation mocks base method
func (m *MockGithubClient) GetBranchInformation(config *models.Configuration, branchName string) (*models.GetBranchResponse, apierrors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchInformation", config, branchName)
	ret0, _ := ret[0].(*models.GetBranchResponse)
	ret1, _ := ret[1].(apierrors.ApiError)
	return ret0, ret1
}

// GetBranchInformation indicates an expected call of GetBranchInformation
func (mr *MockGithubClientMockRecorder) GetBranchInformation(config, branchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchInformation", reflect.TypeOf((*MockGithubClient)(nil).GetBranchInformation), config, branchName)
}

// CreateGithubRef mocks base method
func (m *MockGithubClient) CreateGithubRef(config *models.Configuration, branchConfig *models.Branch, workflowConfig *models.WorkflowConfig) apierrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGithubRef", config, branchConfig, workflowConfig)
	ret0, _ := ret[0].(apierrors.ApiError)
	return ret0
}

// CreateGithubRef indicates an expected call of CreateGithubRef
func (mr *MockGithubClientMockRecorder) CreateGithubRef(config, branchConfig, workflowConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGithubRef", reflect.TypeOf((*MockGithubClient)(nil).CreateGithubRef), config, branchConfig, workflowConfig)
}

// ProtectBranch mocks base method
func (m *MockGithubClient) ProtectBranch(config *models.Configuration, branchConfig *models.Branch) apierrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectBranch", config, branchConfig)
	ret0, _ := ret[0].(apierrors.ApiError)
	return ret0
}

// ProtectBranch indicates an expected call of ProtectBranch
func (mr *MockGithubClientMockRecorder) ProtectBranch(config, branchConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectBranch", reflect.TypeOf((*MockGithubClient)(nil).ProtectBranch), config, branchConfig)
}

// UnprotectBranch mocks base method
func (m *MockGithubClient) UnprotectBranch(config *models.Configuration, branchConfig *models.Branch) apierrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnprotectBranch", config, branchConfig)
	ret0, _ := ret[0].(apierrors.ApiError)
	return ret0
}

// UnprotectBranch indicates an expected call of UnprotectBranch
func (mr *MockGithubClientMockRecorder) UnprotectBranch(config, branchConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectBranch", reflect.TypeOf((*MockGithubClient)(nil).UnprotectBranch), config, branchConfig)
}

// SetDefaultBranch mocks base method
func (m *MockGithubClient) SetDefaultBranch(config *models.Configuration, workflowConfig *models.WorkflowConfig) apierrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultBranch", config, workflowConfig)
	ret0, _ := ret[0].(apierrors.ApiError)
	return ret0
}

// SetDefaultBranch indicates an expected call of SetDefaultBranch
func (mr *MockGithubClientMockRecorder) SetDefaultBranch(config, workflowConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultBranch", reflect.TypeOf((*MockGithubClient)(nil).SetDefaultBranch), config, workflowConfig)
}

// CreateStatus mocks base method
func (m *MockGithubClient) CreateStatus(config *models.Configuration, statusWH *webhook.Status) apierrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", config, statusWH)
	ret0, _ := ret[0].(apierrors.ApiError)
	return ret0
}

// CreateStatus indicates an expected call of CreateStatus
func (mr *MockGithubClientMockRecorder) CreateStatus(config, statusWH interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockGithubClient)(nil).CreateStatus), config, statusWH)
}

// CreateBranch mocks base method
func (m *MockGithubClient) CreateBranch(config *models.Configuration, branchConfig *models.Branch, sha string) apierrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", config, branchConfig, sha)
	ret0, _ := ret[0].(apierrors.ApiError)
	return ret0
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockGithubClientMockRecorder) CreateBranch(config, branchConfig, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGithubClient)(nil).CreateBranch), config, branchConfig, sha)
}

// CreateIssueComment mocks base method
func (m *MockGithubClient) CreateIssueComment(config *models.Configuration, pullRequest *models.PullRequest, issueCommentBody string) apierrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueComment", config, pullRequest, issueCommentBody)
	ret0, _ := ret[0].(apierrors.ApiError)
	return ret0
}

// CreateIssueComment indicates an expected call of CreateIssueComment
func (mr *MockGithubClientMockRecorder) CreateIssueComment(config, pullRequest, issueCommentBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueComment", reflect.TypeOf((*MockGithubClient)(nil).CreateIssueComment), config, pullRequest, issueCommentBody)
}
